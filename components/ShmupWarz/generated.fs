namespace ShmupWarz 
(**
 * Entitas Generated Components and Extensions for ShmupWarz
 *
 * do not edit this file
 *)
 
[<AutoOpen>]
module EntitasExtensions =

    open Entitas
    open System
    open System.Collections.Generic

    (**
    * Component extensions
    *)
    type Component with
        static member Background with get() = 0
        static member Bounds with get() = 1
        static member Bullet with get() = 2
        static member ColorTween with get() = 3
        static member Destroy with get() = 4
        static member Enemy with get() = 5
        static member Expires with get() = 6
        static member Firing with get() = 7
        static member Health with get() = 8
        static member Layer with get() = 9
        static member Life with get() = 10
        static member Mine with get() = 11
        static member Mouse with get() = 12
        static member ParallaxStar with get() = 13
        static member Player with get() = 14
        static member Position with get() = 15
        static member Resource with get() = 16
        static member Scale with get() = 17
        static member ScaleTween with get() = 18
        static member Score with get() = 19
        static member SoundEffect with get() = 20
        static member Status with get() = 21
        static member Tint with get() = 22
        static member View with get() = 23
        static member Velocity with get() = 24
        static member TotalComponents with get() = 25


    [<AllowNullLiteral>]
    type BackgroundComponent() =
        inherit Component()
        member val Filter = null with get, set

    [<AllowNullLiteral>]
    type BoundsComponent() =
        inherit Component()
        member val Radius = 0.0f with get, set

    [<AllowNullLiteral>]
    type BulletComponent() =
        inherit Component()
        member val Active = false with get, set

    [<AllowNullLiteral>]
    type ColorTweenComponent() =
        inherit Component()
        member val RedMin = 0.0f with get, set
        member val RedMax = 0.0f with get, set
        member val RedSpeed = 0.0f with get, set
        member val GreenMin = 0.0f with get, set
        member val GreenMax = 0.0f with get, set
        member val GreenSpeed = 0.0f with get, set
        member val BlueMin = 0.0f with get, set
        member val BlueMax = 0.0f with get, set
        member val BlueSpeed = 0.0f with get, set
        member val AlphaMin = 0.0f with get, set
        member val AlphaMax = 0.0f with get, set
        member val AlphaSpeed = 0.0f with get, set
        member val RedAnimate = false with get, set
        member val GreenAnimate = false with get, set
        member val BlueAnimate = false with get, set
        member val AlphaAnimate = false with get, set
        member val Repeat = false with get, set

    [<AllowNullLiteral>]
    type DestroyComponent() =
        inherit Component()
        member val Active = false with get, set

    [<AllowNullLiteral>]
    type EnemyComponent() =
        inherit Component()
        member val Active = false with get, set

    [<AllowNullLiteral>]
    type ExpiresComponent() =
        inherit Component()
        member val Delay = 0.0f with get, set

    [<AllowNullLiteral>]
    type FiringComponent() =
        inherit Component()
        member val Active = false with get, set

    [<AllowNullLiteral>]
    type HealthComponent() =
        inherit Component()
        member val Health = 0.0f with get, set
        member val MaximumHealth = 0.0f with get, set

    [<AllowNullLiteral>]
    type LayerComponent() =
        inherit Component()
        member val Ordinal = 0.0f with get, set

    [<AllowNullLiteral>]
    type LifeComponent() =
        inherit Component()
        member val Count = 0.0f with get, set

    [<AllowNullLiteral>]
    type MineComponent() =
        inherit Component()
        member val Active = false with get, set

    [<AllowNullLiteral>]
    type MouseComponent() =
        inherit Component()
        member val X = 0.0f with get, set
        member val Y = 0.0f with get, set

    [<AllowNullLiteral>]
    type ParallaxStarComponent() =
        inherit Component()
        member val Active = false with get, set

    [<AllowNullLiteral>]
    type PlayerComponent() =
        inherit Component()
        member val Active = false with get, set

    [<AllowNullLiteral>]
    type PositionComponent() =
        inherit Component()
        member val X = 0.0f with get, set
        member val Y = 0.0f with get, set

    [<AllowNullLiteral>]
    type ResourceComponent() =
        inherit Component()
        member val Name = "" with get, set

    [<AllowNullLiteral>]
    type ScaleComponent() =
        inherit Component()
        member val X = 0.0f with get, set
        member val Y = 0.0f with get, set

    [<AllowNullLiteral>]
    type ScaleTweenComponent() =
        inherit Component()
        member val Min = 0.0f with get, set
        member val Max = 0.0f with get, set
        member val Speed = 0.0f with get, set
        member val Repeat = false with get, set
        member val Active = false with get, set

    [<AllowNullLiteral>]
    type ScoreComponent() =
        inherit Component()
        member val Value = 0.0f with get, set

    [<AllowNullLiteral>]
    type SoundEffectComponent() =
        inherit Component()
        member val Effect = 0.0f with get, set

    [<AllowNullLiteral>]
    type StatusComponent() =
        inherit Component()
        member val Percent = 0.0f with get, set
        member val Immunity = 0.0f with get, set

    [<AllowNullLiteral>]
    type TintComponent() =
        inherit Component()
        member val Color = null with get, set

    [<AllowNullLiteral>]
    type ViewComponent() =
        inherit Component()
        member val GameObject = null with get, set

    [<AllowNullLiteral>]
    type VelocityComponent() =
        inherit Component()
        member val X = 0.0f with get, set
        member val Y = 0.0f with get, set


    (**
    * Matcher extensions
    *)
    type Matcher with

        static member Background
            with get() = 
                Matcher.AllOf(Component.Background) 

        static member Bounds
            with get() = 
                Matcher.AllOf(Component.Bounds) 

        static member Bullet
            with get() = 
                Matcher.AllOf(Component.Bullet) 

        static member ColorTween
            with get() = 
                Matcher.AllOf(Component.ColorTween) 

        static member Destroy
            with get() = 
                Matcher.AllOf(Component.Destroy) 

        static member Enemy
            with get() = 
                Matcher.AllOf(Component.Enemy) 

        static member Expires
            with get() = 
                Matcher.AllOf(Component.Expires) 

        static member Firing
            with get() = 
                Matcher.AllOf(Component.Firing) 

        static member Health
            with get() = 
                Matcher.AllOf(Component.Health) 

        static member Layer
            with get() = 
                Matcher.AllOf(Component.Layer) 

        static member Life
            with get() = 
                Matcher.AllOf(Component.Life) 

        static member Mine
            with get() = 
                Matcher.AllOf(Component.Mine) 

        static member Mouse
            with get() = 
                Matcher.AllOf(Component.Mouse) 

        static member ParallaxStar
            with get() = 
                Matcher.AllOf(Component.ParallaxStar) 

        static member Player
            with get() = 
                Matcher.AllOf(Component.Player) 

        static member Position
            with get() = 
                Matcher.AllOf(Component.Position) 

        static member Resource
            with get() = 
                Matcher.AllOf(Component.Resource) 

        static member Scale
            with get() = 
                Matcher.AllOf(Component.Scale) 

        static member ScaleTween
            with get() = 
                Matcher.AllOf(Component.ScaleTween) 

        static member Score
            with get() = 
                Matcher.AllOf(Component.Score) 

        static member SoundEffect
            with get() = 
                Matcher.AllOf(Component.SoundEffect) 

        static member Status
            with get() = 
                Matcher.AllOf(Component.Status) 

        static member Tint
            with get() = 
                Matcher.AllOf(Component.Tint) 

        static member View
            with get() = 
                Matcher.AllOf(Component.View) 

        static member Velocity
            with get() = 
                Matcher.AllOf(Component.Velocity) 


    (**
    * Entity extensions
    *)
    type Entity with

        (** Entity: Background methods*)

        member this.BackgroundComponentPool
            with get() = new Stack<BackgroundComponent>()

        member this.Background
            with get() = this.GetComponent(Component.Background):?>BackgroundComponent

        member this.HasBackground
            with get() = this.HasComponent(Component.Background)
 
        member this.ClearBackgroundComponentPool() =
            this.BackgroundComponentPool.Clear()

        member this.AddBackground(filter) =
            let mutable c =
                match this.BackgroundComponentPool.Count with
                | 0 -> new BackgroundComponent()
                | _ -> this.BackgroundComponentPool.Pop()
            c.Filter <- filter
            this.AddComponent(Component.Background, c) |> ignore
            this

        member this.ReplaceBackground(filter) =
            let previousComponent = if this.HasBackground then this.Background else null
            let mutable c =
                match this.BackgroundComponentPool.Count with
                | 0 -> new BackgroundComponent()
                | _ -> this.BackgroundComponentPool.Pop()
            c.Filter <- filter
            this.ReplaceComponent(Component.Background, c) |> ignore
            if not(isNull(previousComponent)) then
                this.BackgroundComponentPool.Push(previousComponent)
            this

        member this.RemoveBackground() =
            let c = this.Background
            this.RemoveComponent(Component.Background) |> ignore
            this.BackgroundComponentPool.Push(c)
            this


        (** Entity: Bounds methods*)

        member this.BoundsComponentPool
            with get() = new Stack<BoundsComponent>()

        member this.Bounds
            with get() = this.GetComponent(Component.Bounds):?>BoundsComponent

        member this.HasBounds
            with get() = this.HasComponent(Component.Bounds)
 
        member this.ClearBoundsComponentPool() =
            this.BoundsComponentPool.Clear()

        member this.AddBounds(radius) =
            let mutable c =
                match this.BoundsComponentPool.Count with
                | 0 -> new BoundsComponent()
                | _ -> this.BoundsComponentPool.Pop()
            c.Radius <- radius
            this.AddComponent(Component.Bounds, c) |> ignore
            this

        member this.ReplaceBounds(radius) =
            let previousComponent = if this.HasBounds then this.Bounds else null
            let mutable c =
                match this.BoundsComponentPool.Count with
                | 0 -> new BoundsComponent()
                | _ -> this.BoundsComponentPool.Pop()
            c.Radius <- radius
            this.ReplaceComponent(Component.Bounds, c) |> ignore
            if not(isNull(previousComponent)) then
                this.BoundsComponentPool.Push(previousComponent)
            this

        member this.RemoveBounds() =
            let c = this.Bounds
            this.RemoveComponent(Component.Bounds) |> ignore
            this.BoundsComponentPool.Push(c)
            this


        (** Entity: Bullet methods*)
        static member BulletComponent= new BulletComponent()

        member this.IsBullet
            with get() =
                this.HasComponent(Component.Bullet)
            and set(value) =
                if (value <> this.IsBullet) then
                    this.AddComponent(Component.Bullet, Entity.BulletComponent) |> ignore
                else
                    this.RemoveComponent(Component.Bullet) |> ignore
                
        member this.SetBullet(value) =
            this.IsBullet <- value
            this


        (** Entity: ColorTween methods*)

        member this.ColorTweenComponentPool
            with get() = new Stack<ColorTweenComponent>()

        member this.ColorTween
            with get() = this.GetComponent(Component.ColorTween):?>ColorTweenComponent

        member this.HasColorTween
            with get() = this.HasComponent(Component.ColorTween)
 
        member this.ClearColorTweenComponentPool() =
            this.ColorTweenComponentPool.Clear()

        member this.AddColorTween(redMin, redMax, redSpeed, greenMin, greenMax, greenSpeed, blueMin, blueMax, blueSpeed, alphaMin, alphaMax, alphaSpeed, redAnimate, greenAnimate, blueAnimate, alphaAnimate, repeat) =
            let mutable c =
                match this.ColorTweenComponentPool.Count with
                | 0 -> new ColorTweenComponent()
                | _ -> this.ColorTweenComponentPool.Pop()
            c.RedMin <- redMin
            c.RedMax <- redMax
            c.RedSpeed <- redSpeed
            c.GreenMin <- greenMin
            c.GreenMax <- greenMax
            c.GreenSpeed <- greenSpeed
            c.BlueMin <- blueMin
            c.BlueMax <- blueMax
            c.BlueSpeed <- blueSpeed
            c.AlphaMin <- alphaMin
            c.AlphaMax <- alphaMax
            c.AlphaSpeed <- alphaSpeed
            c.RedAnimate <- redAnimate
            c.GreenAnimate <- greenAnimate
            c.BlueAnimate <- blueAnimate
            c.AlphaAnimate <- alphaAnimate
            c.Repeat <- repeat
            this.AddComponent(Component.ColorTween, c) |> ignore
            this

        member this.ReplaceColorTween(redMin, redMax, redSpeed, greenMin, greenMax, greenSpeed, blueMin, blueMax, blueSpeed, alphaMin, alphaMax, alphaSpeed, redAnimate, greenAnimate, blueAnimate, alphaAnimate, repeat) =
            let previousComponent = if this.HasColorTween then this.ColorTween else null
            let mutable c =
                match this.ColorTweenComponentPool.Count with
                | 0 -> new ColorTweenComponent()
                | _ -> this.ColorTweenComponentPool.Pop()
            c.RedMin <- redMin
            c.RedMax <- redMax
            c.RedSpeed <- redSpeed
            c.GreenMin <- greenMin
            c.GreenMax <- greenMax
            c.GreenSpeed <- greenSpeed
            c.BlueMin <- blueMin
            c.BlueMax <- blueMax
            c.BlueSpeed <- blueSpeed
            c.AlphaMin <- alphaMin
            c.AlphaMax <- alphaMax
            c.AlphaSpeed <- alphaSpeed
            c.RedAnimate <- redAnimate
            c.GreenAnimate <- greenAnimate
            c.BlueAnimate <- blueAnimate
            c.AlphaAnimate <- alphaAnimate
            c.Repeat <- repeat
            this.ReplaceComponent(Component.ColorTween, c) |> ignore
            if not(isNull(previousComponent)) then
                this.ColorTweenComponentPool.Push(previousComponent)
            this

        member this.RemoveColorTween() =
            let c = this.ColorTween
            this.RemoveComponent(Component.ColorTween) |> ignore
            this.ColorTweenComponentPool.Push(c)
            this


        (** Entity: Destroy methods*)
        static member DestroyComponent= new DestroyComponent()

        member this.IsDestroy
            with get() =
                this.HasComponent(Component.Destroy)
            and set(value) =
                if (value <> this.IsDestroy) then
                    this.AddComponent(Component.Destroy, Entity.DestroyComponent) |> ignore
                else
                    this.RemoveComponent(Component.Destroy) |> ignore
                
        member this.SetDestroy(value) =
            this.IsDestroy <- value
            this


        (** Entity: Enemy methods*)
        static member EnemyComponent= new EnemyComponent()

        member this.IsEnemy
            with get() =
                this.HasComponent(Component.Enemy)
            and set(value) =
                if (value <> this.IsEnemy) then
                    this.AddComponent(Component.Enemy, Entity.EnemyComponent) |> ignore
                else
                    this.RemoveComponent(Component.Enemy) |> ignore
                
        member this.SetEnemy(value) =
            this.IsEnemy <- value
            this


        (** Entity: Expires methods*)

        member this.ExpiresComponentPool
            with get() = new Stack<ExpiresComponent>()

        member this.Expires
            with get() = this.GetComponent(Component.Expires):?>ExpiresComponent

        member this.HasExpires
            with get() = this.HasComponent(Component.Expires)
 
        member this.ClearExpiresComponentPool() =
            this.ExpiresComponentPool.Clear()

        member this.AddExpires(delay) =
            let mutable c =
                match this.ExpiresComponentPool.Count with
                | 0 -> new ExpiresComponent()
                | _ -> this.ExpiresComponentPool.Pop()
            c.Delay <- delay
            this.AddComponent(Component.Expires, c) |> ignore
            this

        member this.ReplaceExpires(delay) =
            let previousComponent = if this.HasExpires then this.Expires else null
            let mutable c =
                match this.ExpiresComponentPool.Count with
                | 0 -> new ExpiresComponent()
                | _ -> this.ExpiresComponentPool.Pop()
            c.Delay <- delay
            this.ReplaceComponent(Component.Expires, c) |> ignore
            if not(isNull(previousComponent)) then
                this.ExpiresComponentPool.Push(previousComponent)
            this

        member this.RemoveExpires() =
            let c = this.Expires
            this.RemoveComponent(Component.Expires) |> ignore
            this.ExpiresComponentPool.Push(c)
            this


        (** Entity: Firing methods*)
        static member FiringComponent= new FiringComponent()

        member this.IsFiring
            with get() =
                this.HasComponent(Component.Firing)
            and set(value) =
                if (value <> this.IsFiring) then
                    this.AddComponent(Component.Firing, Entity.FiringComponent) |> ignore
                else
                    this.RemoveComponent(Component.Firing) |> ignore
                
        member this.SetFiring(value) =
            this.IsFiring <- value
            this


        (** Entity: Health methods*)

        member this.HealthComponentPool
            with get() = new Stack<HealthComponent>()

        member this.Health
            with get() = this.GetComponent(Component.Health):?>HealthComponent

        member this.HasHealth
            with get() = this.HasComponent(Component.Health)
 
        member this.ClearHealthComponentPool() =
            this.HealthComponentPool.Clear()

        member this.AddHealth(health, maximumHealth) =
            let mutable c =
                match this.HealthComponentPool.Count with
                | 0 -> new HealthComponent()
                | _ -> this.HealthComponentPool.Pop()
            c.Health <- health
            c.MaximumHealth <- maximumHealth
            this.AddComponent(Component.Health, c) |> ignore
            this

        member this.ReplaceHealth(health, maximumHealth) =
            let previousComponent = if this.HasHealth then this.Health else null
            let mutable c =
                match this.HealthComponentPool.Count with
                | 0 -> new HealthComponent()
                | _ -> this.HealthComponentPool.Pop()
            c.Health <- health
            c.MaximumHealth <- maximumHealth
            this.ReplaceComponent(Component.Health, c) |> ignore
            if not(isNull(previousComponent)) then
                this.HealthComponentPool.Push(previousComponent)
            this

        member this.RemoveHealth() =
            let c = this.Health
            this.RemoveComponent(Component.Health) |> ignore
            this.HealthComponentPool.Push(c)
            this


        (** Entity: Layer methods*)

        member this.LayerComponentPool
            with get() = new Stack<LayerComponent>()

        member this.Layer
            with get() = this.GetComponent(Component.Layer):?>LayerComponent

        member this.HasLayer
            with get() = this.HasComponent(Component.Layer)
 
        member this.ClearLayerComponentPool() =
            this.LayerComponentPool.Clear()

        member this.AddLayer(ordinal) =
            let mutable c =
                match this.LayerComponentPool.Count with
                | 0 -> new LayerComponent()
                | _ -> this.LayerComponentPool.Pop()
            c.Ordinal <- ordinal
            this.AddComponent(Component.Layer, c) |> ignore
            this

        member this.ReplaceLayer(ordinal) =
            let previousComponent = if this.HasLayer then this.Layer else null
            let mutable c =
                match this.LayerComponentPool.Count with
                | 0 -> new LayerComponent()
                | _ -> this.LayerComponentPool.Pop()
            c.Ordinal <- ordinal
            this.ReplaceComponent(Component.Layer, c) |> ignore
            if not(isNull(previousComponent)) then
                this.LayerComponentPool.Push(previousComponent)
            this

        member this.RemoveLayer() =
            let c = this.Layer
            this.RemoveComponent(Component.Layer) |> ignore
            this.LayerComponentPool.Push(c)
            this


        (** Entity: Life methods*)

        member this.LifeComponentPool
            with get() = new Stack<LifeComponent>()

        member this.Life
            with get() = this.GetComponent(Component.Life):?>LifeComponent

        member this.HasLife
            with get() = this.HasComponent(Component.Life)
 
        member this.ClearLifeComponentPool() =
            this.LifeComponentPool.Clear()

        member this.AddLife(count) =
            let mutable c =
                match this.LifeComponentPool.Count with
                | 0 -> new LifeComponent()
                | _ -> this.LifeComponentPool.Pop()
            c.Count <- count
            this.AddComponent(Component.Life, c) |> ignore
            this

        member this.ReplaceLife(count) =
            let previousComponent = if this.HasLife then this.Life else null
            let mutable c =
                match this.LifeComponentPool.Count with
                | 0 -> new LifeComponent()
                | _ -> this.LifeComponentPool.Pop()
            c.Count <- count
            this.ReplaceComponent(Component.Life, c) |> ignore
            if not(isNull(previousComponent)) then
                this.LifeComponentPool.Push(previousComponent)
            this

        member this.RemoveLife() =
            let c = this.Life
            this.RemoveComponent(Component.Life) |> ignore
            this.LifeComponentPool.Push(c)
            this


        (** Entity: Mine methods*)
        static member MineComponent= new MineComponent()

        member this.IsMine
            with get() =
                this.HasComponent(Component.Mine)
            and set(value) =
                if (value <> this.IsMine) then
                    this.AddComponent(Component.Mine, Entity.MineComponent) |> ignore
                else
                    this.RemoveComponent(Component.Mine) |> ignore
                
        member this.SetMine(value) =
            this.IsMine <- value
            this


        (** Entity: Mouse methods*)

        member this.MouseComponentPool
            with get() = new Stack<MouseComponent>()

        member this.Mouse
            with get() = this.GetComponent(Component.Mouse):?>MouseComponent

        member this.HasMouse
            with get() = this.HasComponent(Component.Mouse)
 
        member this.ClearMouseComponentPool() =
            this.MouseComponentPool.Clear()

        member this.AddMouse(x, y) =
            let mutable c =
                match this.MouseComponentPool.Count with
                | 0 -> new MouseComponent()
                | _ -> this.MouseComponentPool.Pop()
            c.X <- x
            c.Y <- y
            this.AddComponent(Component.Mouse, c) |> ignore
            this

        member this.ReplaceMouse(x, y) =
            let previousComponent = if this.HasMouse then this.Mouse else null
            let mutable c =
                match this.MouseComponentPool.Count with
                | 0 -> new MouseComponent()
                | _ -> this.MouseComponentPool.Pop()
            c.X <- x
            c.Y <- y
            this.ReplaceComponent(Component.Mouse, c) |> ignore
            if not(isNull(previousComponent)) then
                this.MouseComponentPool.Push(previousComponent)
            this

        member this.RemoveMouse() =
            let c = this.Mouse
            this.RemoveComponent(Component.Mouse) |> ignore
            this.MouseComponentPool.Push(c)
            this


        (** Entity: ParallaxStar methods*)
        static member ParallaxStarComponent= new ParallaxStarComponent()

        member this.IsParallaxStar
            with get() =
                this.HasComponent(Component.ParallaxStar)
            and set(value) =
                if (value <> this.IsParallaxStar) then
                    this.AddComponent(Component.ParallaxStar, Entity.ParallaxStarComponent) |> ignore
                else
                    this.RemoveComponent(Component.ParallaxStar) |> ignore
                
        member this.SetParallaxStar(value) =
            this.IsParallaxStar <- value
            this


        (** Entity: Player methods*)
        static member PlayerComponent= new PlayerComponent()

        member this.IsPlayer
            with get() =
                this.HasComponent(Component.Player)
            and set(value) =
                if (value <> this.IsPlayer) then
                    this.AddComponent(Component.Player, Entity.PlayerComponent) |> ignore
                else
                    this.RemoveComponent(Component.Player) |> ignore
                
        member this.SetPlayer(value) =
            this.IsPlayer <- value
            this


        (** Entity: Position methods*)

        member this.PositionComponentPool
            with get() = new Stack<PositionComponent>()

        member this.Position
            with get() = this.GetComponent(Component.Position):?>PositionComponent

        member this.HasPosition
            with get() = this.HasComponent(Component.Position)
 
        member this.ClearPositionComponentPool() =
            this.PositionComponentPool.Clear()

        member this.AddPosition(x, y) =
            let mutable c =
                match this.PositionComponentPool.Count with
                | 0 -> new PositionComponent()
                | _ -> this.PositionComponentPool.Pop()
            c.X <- x
            c.Y <- y
            this.AddComponent(Component.Position, c) |> ignore
            this

        member this.ReplacePosition(x, y) =
            let previousComponent = if this.HasPosition then this.Position else null
            let mutable c =
                match this.PositionComponentPool.Count with
                | 0 -> new PositionComponent()
                | _ -> this.PositionComponentPool.Pop()
            c.X <- x
            c.Y <- y
            this.ReplaceComponent(Component.Position, c) |> ignore
            if not(isNull(previousComponent)) then
                this.PositionComponentPool.Push(previousComponent)
            this

        member this.RemovePosition() =
            let c = this.Position
            this.RemoveComponent(Component.Position) |> ignore
            this.PositionComponentPool.Push(c)
            this


        (** Entity: Resource methods*)

        member this.ResourceComponentPool
            with get() = new Stack<ResourceComponent>()

        member this.Resource
            with get() = this.GetComponent(Component.Resource):?>ResourceComponent

        member this.HasResource
            with get() = this.HasComponent(Component.Resource)
 
        member this.ClearResourceComponentPool() =
            this.ResourceComponentPool.Clear()

        member this.AddResource(name) =
            let mutable c =
                match this.ResourceComponentPool.Count with
                | 0 -> new ResourceComponent()
                | _ -> this.ResourceComponentPool.Pop()
            c.Name <- name
            this.AddComponent(Component.Resource, c) |> ignore
            this

        member this.ReplaceResource(name) =
            let previousComponent = if this.HasResource then this.Resource else null
            let mutable c =
                match this.ResourceComponentPool.Count with
                | 0 -> new ResourceComponent()
                | _ -> this.ResourceComponentPool.Pop()
            c.Name <- name
            this.ReplaceComponent(Component.Resource, c) |> ignore
            if not(isNull(previousComponent)) then
                this.ResourceComponentPool.Push(previousComponent)
            this

        member this.RemoveResource() =
            let c = this.Resource
            this.RemoveComponent(Component.Resource) |> ignore
            this.ResourceComponentPool.Push(c)
            this


        (** Entity: Scale methods*)

        member this.ScaleComponentPool
            with get() = new Stack<ScaleComponent>()

        member this.Scale
            with get() = this.GetComponent(Component.Scale):?>ScaleComponent

        member this.HasScale
            with get() = this.HasComponent(Component.Scale)
 
        member this.ClearScaleComponentPool() =
            this.ScaleComponentPool.Clear()

        member this.AddScale(x, y) =
            let mutable c =
                match this.ScaleComponentPool.Count with
                | 0 -> new ScaleComponent()
                | _ -> this.ScaleComponentPool.Pop()
            c.X <- x
            c.Y <- y
            this.AddComponent(Component.Scale, c) |> ignore
            this

        member this.ReplaceScale(x, y) =
            let previousComponent = if this.HasScale then this.Scale else null
            let mutable c =
                match this.ScaleComponentPool.Count with
                | 0 -> new ScaleComponent()
                | _ -> this.ScaleComponentPool.Pop()
            c.X <- x
            c.Y <- y
            this.ReplaceComponent(Component.Scale, c) |> ignore
            if not(isNull(previousComponent)) then
                this.ScaleComponentPool.Push(previousComponent)
            this

        member this.RemoveScale() =
            let c = this.Scale
            this.RemoveComponent(Component.Scale) |> ignore
            this.ScaleComponentPool.Push(c)
            this


        (** Entity: ScaleTween methods*)

        member this.ScaleTweenComponentPool
            with get() = new Stack<ScaleTweenComponent>()

        member this.ScaleTween
            with get() = this.GetComponent(Component.ScaleTween):?>ScaleTweenComponent

        member this.HasScaleTween
            with get() = this.HasComponent(Component.ScaleTween)
 
        member this.ClearScaleTweenComponentPool() =
            this.ScaleTweenComponentPool.Clear()

        member this.AddScaleTween(min, max, speed, repeat, active) =
            let mutable c =
                match this.ScaleTweenComponentPool.Count with
                | 0 -> new ScaleTweenComponent()
                | _ -> this.ScaleTweenComponentPool.Pop()
            c.Min <- min
            c.Max <- max
            c.Speed <- speed
            c.Repeat <- repeat
            c.Active <- active
            this.AddComponent(Component.ScaleTween, c) |> ignore
            this

        member this.ReplaceScaleTween(min, max, speed, repeat, active) =
            let previousComponent = if this.HasScaleTween then this.ScaleTween else null
            let mutable c =
                match this.ScaleTweenComponentPool.Count with
                | 0 -> new ScaleTweenComponent()
                | _ -> this.ScaleTweenComponentPool.Pop()
            c.Min <- min
            c.Max <- max
            c.Speed <- speed
            c.Repeat <- repeat
            c.Active <- active
            this.ReplaceComponent(Component.ScaleTween, c) |> ignore
            if not(isNull(previousComponent)) then
                this.ScaleTweenComponentPool.Push(previousComponent)
            this

        member this.RemoveScaleTween() =
            let c = this.ScaleTween
            this.RemoveComponent(Component.ScaleTween) |> ignore
            this.ScaleTweenComponentPool.Push(c)
            this


        (** Entity: Score methods*)

        member this.ScoreComponentPool
            with get() = new Stack<ScoreComponent>()

        member this.Score
            with get() = this.GetComponent(Component.Score):?>ScoreComponent

        member this.HasScore
            with get() = this.HasComponent(Component.Score)
 
        member this.ClearScoreComponentPool() =
            this.ScoreComponentPool.Clear()

        member this.AddScore(value) =
            let mutable c =
                match this.ScoreComponentPool.Count with
                | 0 -> new ScoreComponent()
                | _ -> this.ScoreComponentPool.Pop()
            c.Value <- value
            this.AddComponent(Component.Score, c) |> ignore
            this

        member this.ReplaceScore(value) =
            let previousComponent = if this.HasScore then this.Score else null
            let mutable c =
                match this.ScoreComponentPool.Count with
                | 0 -> new ScoreComponent()
                | _ -> this.ScoreComponentPool.Pop()
            c.Value <- value
            this.ReplaceComponent(Component.Score, c) |> ignore
            if not(isNull(previousComponent)) then
                this.ScoreComponentPool.Push(previousComponent)
            this

        member this.RemoveScore() =
            let c = this.Score
            this.RemoveComponent(Component.Score) |> ignore
            this.ScoreComponentPool.Push(c)
            this


        (** Entity: SoundEffect methods*)

        member this.SoundEffectComponentPool
            with get() = new Stack<SoundEffectComponent>()

        member this.SoundEffect
            with get() = this.GetComponent(Component.SoundEffect):?>SoundEffectComponent

        member this.HasSoundEffect
            with get() = this.HasComponent(Component.SoundEffect)
 
        member this.ClearSoundEffectComponentPool() =
            this.SoundEffectComponentPool.Clear()

        member this.AddSoundEffect(effect) =
            let mutable c =
                match this.SoundEffectComponentPool.Count with
                | 0 -> new SoundEffectComponent()
                | _ -> this.SoundEffectComponentPool.Pop()
            c.Effect <- effect
            this.AddComponent(Component.SoundEffect, c) |> ignore
            this

        member this.ReplaceSoundEffect(effect) =
            let previousComponent = if this.HasSoundEffect then this.SoundEffect else null
            let mutable c =
                match this.SoundEffectComponentPool.Count with
                | 0 -> new SoundEffectComponent()
                | _ -> this.SoundEffectComponentPool.Pop()
            c.Effect <- effect
            this.ReplaceComponent(Component.SoundEffect, c) |> ignore
            if not(isNull(previousComponent)) then
                this.SoundEffectComponentPool.Push(previousComponent)
            this

        member this.RemoveSoundEffect() =
            let c = this.SoundEffect
            this.RemoveComponent(Component.SoundEffect) |> ignore
            this.SoundEffectComponentPool.Push(c)
            this


        (** Entity: Status methods*)

        member this.StatusComponentPool
            with get() = new Stack<StatusComponent>()

        member this.Status
            with get() = this.GetComponent(Component.Status):?>StatusComponent

        member this.HasStatus
            with get() = this.HasComponent(Component.Status)
 
        member this.ClearStatusComponentPool() =
            this.StatusComponentPool.Clear()

        member this.AddStatus(percent, immunity) =
            let mutable c =
                match this.StatusComponentPool.Count with
                | 0 -> new StatusComponent()
                | _ -> this.StatusComponentPool.Pop()
            c.Percent <- percent
            c.Immunity <- immunity
            this.AddComponent(Component.Status, c) |> ignore
            this

        member this.ReplaceStatus(percent, immunity) =
            let previousComponent = if this.HasStatus then this.Status else null
            let mutable c =
                match this.StatusComponentPool.Count with
                | 0 -> new StatusComponent()
                | _ -> this.StatusComponentPool.Pop()
            c.Percent <- percent
            c.Immunity <- immunity
            this.ReplaceComponent(Component.Status, c) |> ignore
            if not(isNull(previousComponent)) then
                this.StatusComponentPool.Push(previousComponent)
            this

        member this.RemoveStatus() =
            let c = this.Status
            this.RemoveComponent(Component.Status) |> ignore
            this.StatusComponentPool.Push(c)
            this


        (** Entity: Tint methods*)

        member this.TintComponentPool
            with get() = new Stack<TintComponent>()

        member this.Tint
            with get() = this.GetComponent(Component.Tint):?>TintComponent

        member this.HasTint
            with get() = this.HasComponent(Component.Tint)
 
        member this.ClearTintComponentPool() =
            this.TintComponentPool.Clear()

        member this.AddTint(color) =
            let mutable c =
                match this.TintComponentPool.Count with
                | 0 -> new TintComponent()
                | _ -> this.TintComponentPool.Pop()
            c.Color <- color
            this.AddComponent(Component.Tint, c) |> ignore
            this

        member this.ReplaceTint(color) =
            let previousComponent = if this.HasTint then this.Tint else null
            let mutable c =
                match this.TintComponentPool.Count with
                | 0 -> new TintComponent()
                | _ -> this.TintComponentPool.Pop()
            c.Color <- color
            this.ReplaceComponent(Component.Tint, c) |> ignore
            if not(isNull(previousComponent)) then
                this.TintComponentPool.Push(previousComponent)
            this

        member this.RemoveTint() =
            let c = this.Tint
            this.RemoveComponent(Component.Tint) |> ignore
            this.TintComponentPool.Push(c)
            this


        (** Entity: View methods*)

        member this.ViewComponentPool
            with get() = new Stack<ViewComponent>()

        member this.View
            with get() = this.GetComponent(Component.View):?>ViewComponent

        member this.HasView
            with get() = this.HasComponent(Component.View)
 
        member this.ClearViewComponentPool() =
            this.ViewComponentPool.Clear()

        member this.AddView(gameObject) =
            let mutable c =
                match this.ViewComponentPool.Count with
                | 0 -> new ViewComponent()
                | _ -> this.ViewComponentPool.Pop()
            c.GameObject <- gameObject
            this.AddComponent(Component.View, c) |> ignore
            this

        member this.ReplaceView(gameObject) =
            let previousComponent = if this.HasView then this.View else null
            let mutable c =
                match this.ViewComponentPool.Count with
                | 0 -> new ViewComponent()
                | _ -> this.ViewComponentPool.Pop()
            c.GameObject <- gameObject
            this.ReplaceComponent(Component.View, c) |> ignore
            if not(isNull(previousComponent)) then
                this.ViewComponentPool.Push(previousComponent)
            this

        member this.RemoveView() =
            let c = this.View
            this.RemoveComponent(Component.View) |> ignore
            this.ViewComponentPool.Push(c)
            this


        (** Entity: Velocity methods*)

        member this.VelocityComponentPool
            with get() = new Stack<VelocityComponent>()

        member this.Velocity
            with get() = this.GetComponent(Component.Velocity):?>VelocityComponent

        member this.HasVelocity
            with get() = this.HasComponent(Component.Velocity)
 
        member this.ClearVelocityComponentPool() =
            this.VelocityComponentPool.Clear()

        member this.AddVelocity(x, y) =
            let mutable c =
                match this.VelocityComponentPool.Count with
                | 0 -> new VelocityComponent()
                | _ -> this.VelocityComponentPool.Pop()
            c.X <- x
            c.Y <- y
            this.AddComponent(Component.Velocity, c) |> ignore
            this

        member this.ReplaceVelocity(x, y) =
            let previousComponent = if this.HasVelocity then this.Velocity else null
            let mutable c =
                match this.VelocityComponentPool.Count with
                | 0 -> new VelocityComponent()
                | _ -> this.VelocityComponentPool.Pop()
            c.X <- x
            c.Y <- y
            this.ReplaceComponent(Component.Velocity, c) |> ignore
            if not(isNull(previousComponent)) then
                this.VelocityComponentPool.Push(previousComponent)
            this

        member this.RemoveVelocity() =
            let c = this.Velocity
            this.RemoveComponent(Component.Velocity) |> ignore
            this.VelocityComponentPool.Push(c)
            this

