{"version":3,"sources":["../../../lib/ShmupWarz.fs"],"names":[],"mappings":"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","file":"ShmupWarz.js","sourcesContent":["ï»¿module ShmupWarz\n\n(** ShmupWarz Game Demo *)\n#if HTML5\nopen Fable.Core\nopen Fable.Import\nopen Fable.Import.Browser\nopen Fable.Core.JsInterop\nopen Bosco\n#endif\n#if WINDOWS || LINUX\nopen Microsoft.Xna.Framework\nopen Microsoft.Xna.Framework.Graphics\n#endif\nopen Components\nopen Entities\nopen Systems\nopen System.Collections.Generic\n\n(**\n * Create the Entity DataBase\n *) \nlet CreateEntityDB(content) = \n    [\n        CreatePlayer(content);\n        CreateBang(content);\n        CreateBang(content);\n        CreateBang(content);\n        CreateBang(content);\n        CreateBang(content);\n        CreateBang(content);\n        CreateBang(content);\n        CreateBang(content);\n        CreateExplosion(content);\n        CreateExplosion(content);\n        CreateExplosion(content);\n        CreateExplosion(content);\n        CreateExplosion(content);\n        CreateExplosion(content);\n        CreateExplosion(content);\n        CreateExplosion(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateBullet(content);\n        CreateEnemy1(content);\n        CreateEnemy1(content);\n        CreateEnemy1(content);\n        CreateEnemy1(content);\n        CreateEnemy1(content);\n        CreateEnemy1(content);\n        CreateEnemy1(content);\n        CreateEnemy1(content);\n        CreateEnemy1(content);\n        CreateEnemy2(content);\n        CreateEnemy2(content);\n        CreateEnemy2(content);\n        CreateEnemy2(content);\n        CreateEnemy2(content);\n        CreateEnemy2(content);\n        CreateEnemy3(content);\n        CreateEnemy3(content);\n        CreateEnemy3(content);\n        CreateEnemy3(content);\n\n    ]\n\nlet ASSETS = \n    dict[\n        \"background\", \"images/BackdropBlackLittleSparkBlack.png\";\n        \"bang\", \"images/bang.png\";\n        \"bullet\", \"images/bullet.png\";\n        \"enemy1\",\"images/enemy1.png\";\n        \"enemy2\",\"images/enemy2.png\";\n        \"enemy3\",\"images/enemy3.png\";\n        \"explosion\",\"images/explosion.png\";\n        \"fighter\",\"images/fighter.png\";\n        \"font\",\"images/tom-thumb-white.png\"\n        ]\n\n(** ShmupWarz *)\ntype ShmupWarz(height, width0, mobile) as this =\n    inherit SystemInterface(height, width0, Dictionary<string, string>ASSETS)\n    let pixelFactor = (if mobile then 2.0 else 1.0)\n    let width = ((float)width0/pixelFactor)\n    let mutable entities = lazy(CreateEntityDB(this.Content))\n    let fntImage = lazy(CreateSprite(unbox this.Content?font?texture))\n    let bgdImage = lazy(CreateSprite(unbox this.Content?background?texture))\n    let bgdRect = CreateRect(0., 0., width, height)\n    let scaleX = (float) (width / 320.) // pixelFactor\n    let scaleY = (float) (height / 480.) // pixelFactor\n\n    let activeEntities (input:Entity list) =\n        let rec _activeEntities (input:Entity list) (output:Entity list) =\n            match input with\n            | x::xs when x.Active -> _activeEntities xs (x::output)\n            | _::xs -> _activeEntities xs output \n            | [] -> output\n        _activeEntities input []\n    (** Draw the sprite for an Entity *)\n    let drawSprite(spriteBatch:PIXI.Container) (entity) =\n        match entity.Sprite with\n        | Some sprite ->\n            let scale =\n                match entity.Scale with\n                | Some(scale) -> scale\n                | None -> CreatePoint(1., 1.)\n            let color = \n                match entity.Tint with \n                | Some(color) -> color\n                | None -> Color.White\n            sprite.x <- entity.Position.x\n            sprite.y <- entity.Position.y\n            sprite.scale <- scale\n            sprite.tint <- float color\n            spriteBatch.addChild(sprite) |> ignore\n\n        | None -> ()\n\n    member this.Initialize() =\n        Keyboard.init()\n        Mouse.init()\n        base.Initialize()\n\n    override this.LoadContent() =\n        entities.Force() |> ignore\n        ()\n\n    override this.Draw(gameTime) =        \n        this.spriteBatch.children?length <- 0\n        this.spriteBatch.addChild(bgdImage.Value) |> ignore\n        activeEntities(entities.Value)\n        |> List.sortBy(fun e -> e.Layer) \n        |> List.iter(drawSprite(this.spriteBatch))\n        ()\n\n    override this.Update(gameTime) =\n#if WINDOWS || LINUX\n        if GamePad.GetState(PlayerIndex.One).Buttons.Back = ButtonState.Pressed then \n            this.Exit()\n#endif\n        let delta = gameTime\n        let current = entities.Value\n\n        EnemySpawningSystem(delta, this) |> ignore\n        entities <-  // Everything happens here:\n            lazy (current\n                 |> List.map(InputSystem(delta, mobile, this))\n                 |> List.map(EntitySystem(this, int width, int height))\n                 |> List.map(MovementSystem(delta))\n                 |> List.map(ExpiringSystem(delta))\n                 |> List.map(TweenSystem(delta, this))\n                 |> List.map(RemoveOffscreenShipsSystem(this, int width, int height))\n                 |> CollisionSystem(this)\n                 )\n\n        // pick up the list when we draw\n        //this.entityList <- ActiveEntities (entities.Force())\n       \n    (** Deactivate an Entity *)\n    override this.RemoveEntity(id:int) =\n        this.Deactivate <- id :: this.Deactivate\n\n    (** Que a Bullet *)\n    override this.AddBullet(x: float, y:float) =\n        this.Bullets <- BulletQue(x, y) :: this.Bullets\n        //Browser.console.log(\"AddBullet\", x, y, this.Bullets.Length)\n\n    (** Que a Enemy *)\n    override this.AddEnemy(enemy : Enemies) =\n        match enemy with \n        | Enemies.Enemy1 -> this.Enemies1 <- EnemyQue(enemy) :: this.Enemies1\n        | Enemies.Enemy2 -> this.Enemies2 <- EnemyQue(enemy) :: this.Enemies2\n        | Enemies.Enemy3 -> this.Enemies3 <- EnemyQue(enemy) :: this.Enemies3\n        | _ -> ()\n\n    (** Que an Explosion *)\n    override this.AddExplosion(x: float, y:float, scale : float) =\n        this.Explosions <- ExplosionQue(x, y, scale) :: this.Explosions\n\n    (** Que a Bang *)\n    override this.AddBang(x: float, y:float, scale : float) =\n        this.Bangs <- ExplosionQue(x, y, scale) :: this.Bangs\n\n\nlet game = ShmupWarz(320.*1.5, 480.*1.5, false)\ngame.Run() |> ignore\n\n\n"]}