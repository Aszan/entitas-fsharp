{"version":3,"sources":["../../../../lib/Systems/CollisionSystem.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAiBY;AAAI;AACA;AACA;AACA;AACR,2CAAW,IAAI,KAAf,EAAqB,IAAI,KAAzB;AAJK;;AASD;AACM;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAEF;AAAA;AACA;;AACM;AAAA;AAAA,uCAEE;AAAS;;AACb,wCAAG,WAAH,EACI;AAAA;AAAA;AACA;AAGC,qCALL,MAOI;AAEsB;AAFtB;AAGC;AAXK;AAaH,6BAnBT;AAAA;AAA8C;AAAA,yBAA9C;AAAA;AAA8C;AAAA,qBAA9C;AAAA;AAA8C;AAAA,iBAA9C;AAAA;AAA8C;AAAA,aAA9C;AAAA;;AAuBA;AAAA;AAAA,qDAGE;AAAI,4BAAI,6FAAJ,GACI,0CADJ;AAIR;AAJK,iBAAD,EAHF;AAAA;AAAA;;AAUA;AAAA;AAAA,4CAGE;AAAI;AACR,qDAAkB,mCAAlB;AADK,iBAAD,EAHF;AAAA;AAAA;;AAMV,uCAAuB,oBAAvB;AAxCqB","file":"CollisionSystem.js","sourcesContent":["namespace Systems\n\n#if HTML5\nopen Fable.Core\nopen Fable.Import\nopen Fable.Import.Browser\nopen Fable.Core.JsInterop\nopen Bosco\n#endif\nopen Components\nopen Entities\nopen System.Collections.Generic\n\n[<AutoOpen>]\nmodule CollisionSystemModule =\n    (** Return Rect defining the current bounds *)\n    let BoundingRect(entity) =\n        let x = entity.Position.x\n        let y = entity.Position.y\n        let w = entity.Size.x\n        let h = entity.Size.y\n        CreateRect(x - w/2., y - h/2., w, h):>PIXI.HitArea\n\n    (** Collision Handler for Entities *)\n    let CollisionSystem (game:SystemInterface) entities =\n\n        let findCollision a b =\n            match a.EntityType, a.Active, b.EntityType, b.Active with\n            | EntityType.Enemy, true, EntityType.Bullet, true -> \n                game.AddBang(b.Position.x, b.Position.y, 1.0)\n                game.RemoveEntity(b.Id)\n                match a.Health with\n                | Some(h) ->\n                    let health = h.CurHealth-1\n                    if health <= 0 then\n                        game.AddExplosion(b.Position.x, b.Position.y, 0.5)\n                        {\n                            a with\n                                Active = false;\n                        }\n                    else\n                        {\n                            a with \n                                Health = Some(CreateHealth(health, h.MaxHealth));\n                        }\n\n                | None -> a\n            | _ -> a\n\n        let rec figureCollisions (entity:Entity) (sortedEntities:Entity list) =\n            match sortedEntities with\n            | [] -> entity\n            | x :: xs -> \n                let a = if (BoundingRect(entity).contains(x.Position.x, x.Position.y)) then\n                            findCollision entity x\n                        else\n                            entity\n                figureCollisions a xs\n\n        let rec fixCollisions (toFix:Entity list) (alreadyFixed:Entity list) =\n            match toFix with\n            | [] -> alreadyFixed\n            | x :: xs -> \n                let a = figureCollisions x alreadyFixed\n                fixCollisions xs (a::alreadyFixed)\n\n        fixCollisions entities []\n"]}