{"version":3,"sources":["../../../../lib/Systems/TweenSystem.fs"],"names":[],"mappings":";;;;;;;;AAiBe;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACQ;AAAb;AACc;AAAI,0CAAW,gBAAX;AACC,0CAAW,gBAAX;AACI;;AACrB,4BAAG,UAAH,EACI;AAAA;AACA;AACA;AAAe,yBAHnB,MAIA;AAAA,gCAAK,UAAL,EACI;AAAA;AACA;AACA;AAAe;AAAA;;AAIE;AACA;AAHrB;AAZa;AAF+B,iBAAzC;AAAA;AAAyC;AAAA,aAAzC;AAAA;AAAyC;AAAA,SAAzC;AAAA;AAAyC;AAAA","file":"TweenSystem.js","sourcesContent":["\nnamespace Systems\n\n#if HTML5\nopen Fable.Core\nopen Fable.Import\nopen Fable.Import.Browser\nopen Fable.Core.JsInterop\nopen Bosco\n#endif\nopen Components\nopen Entities\nopen System.Collections.Generic\n\n[<AutoOpen>]\nmodule TweenSystemModule =\n    let TweenSystem (delta:float, game:SystemInterface) entity =\n        match (entity.Scale, entity.Tween, entity.Active) with\n        | Some(scale), Some(sa), true ->        \n            let mutable x = scale.x + (sa.Speed * delta)\n            let mutable y =  scale.y + (sa.Speed * delta)\n            let mutable active = sa.Active\n            if x > sa.Max then\n                x <- sa.Max\n                y <- sa.Max\n                active <- false\n            elif x < sa.Min then\n                x <- sa.Min\n                y <- sa.Min\n                active <- false\n\n            {\n                entity with\n                    Scale = Some(CreatePoint(x, y));\n                    Tween = Some(CreateTween(sa.Min, sa.Max, sa.Speed, sa.Repeat, active));\n            }\n\n        | _ -> \n            entity\n\n"]}