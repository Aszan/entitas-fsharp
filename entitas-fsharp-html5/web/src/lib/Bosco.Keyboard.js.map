{"version":3,"sources":["../../../lib/Bosco.Keyboard.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;4CAQ8B;AAAA;AAAA,O;;AACX;AAAA,4CAAe;AAAA;AAAA,WAAf;AAAwB;;AACf;AAAA;AAAgC;;AAEhD;AAAU;AACL,2BAAgB;AAAA;AAAA;AAAA;AAAA,SAAhB,GAA6B;AAAA;AAAA;AAAA;AAAA,SAA7B;AACT,4CAAe,wBAAf;AAFI;AAAO;;AAKX;AAAA,2CAAyC;AAAA;AAAA,SAAzC;AAAA,yCACuC;AAAA;AAAA,SADvC;AACwD","file":"Bosco.Keyboard.js","sourcesContent":["ï»¿namespace Bosco\n\nopen Fable.Core\nopen Fable.Import\nopen Fable.Import.Browser\nopen Fable.Core.JsInterop\n\nmodule Keyboard =\n    let mutable keysPressed = Set.empty\n    let reset () = keysPressed <- Set.empty\n    let isPressed keyCode = Set.contains keyCode keysPressed\n    let update (e : KeyboardEvent, pressed) =\n        let keyCode = int e.keyCode\n        let op = if pressed then Set.add else Set.remove\n        keysPressed <- op keyCode keysPressed\n        null\n    let init () =\n        window.addEventListener_keydown(fun e -> update(e, true))\n        window.addEventListener_keyup(fun e -> update(e, false))\n\n"]}