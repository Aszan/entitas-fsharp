namespace ShmupWarz 
(**
 * Entitas Generated Components and Extensions for ShmupWarz
 *
 * do not edit this file
 *)
 
[<AutoOpen>]
module EntitasExtensions =

    open Entitas
    open System
    open System.Collections.Generic

    (**
    * Component extensions
    *)
    type Component with
        static member Bounds with get() = 0
        static member Bullet with get() = 1
        static member ColorTween with get() = 2
        static member Enemy with get() = 3
        static member Expires with get() = 4
        static member Firing with get() = 5
        static member Health with get() = 6
        static member ParallaxStar with get() = 7
        static member Player with get() = 8
        static member Position with get() = 9
        static member ScaleTween with get() = 10
        static member SoundEffect with get() = 11
        static member View with get() = 12
        static member Velocity with get() = 13
        static member Score with get() = 14
        static member Destroy with get() = 15
        static member Mouse with get() = 16
        static member Scale with get() = 17
        static member Resource with get() = 18
        static member Layer with get() = 19
        static member Background with get() = 20
        static member Mine with get() = 21
        static member Status with get() = 22
        static member Life with get() = 23
        static member TotalComponents with get() = 24


    [<AllowNullLiteral>]
    type BoundsComponent() =
        inherit Component()
        member val radius = 0.0f with get, set

    [<AllowNullLiteral>]
    type BulletComponent() =
        inherit Component()
        member val active = false with get, set

    [<AllowNullLiteral>]
    type ColorTweenComponent() =
        inherit Component()
        member val redMin = 0.0f with get, set
        member val redMax = 0.0f with get, set
        member val redSpeed = 0.0f with get, set
        member val greenMin = 0.0f with get, set
        member val greenMax = 0.0f with get, set
        member val greenSpeed = 0.0f with get, set
        member val blueMin = 0.0f with get, set
        member val blueMax = 0.0f with get, set
        member val blueSpeed = 0.0f with get, set
        member val alphaMin = 0.0f with get, set
        member val alphaMax = 0.0f with get, set
        member val alphaSpeed = 0.0f with get, set
        member val redAnimate = false with get, set
        member val greenAnimate = false with get, set
        member val blueAnimate = false with get, set
        member val alphaAnimate = false with get, set
        member val repeat = false with get, set

    [<AllowNullLiteral>]
    type EnemyComponent() =
        inherit Component()
        member val active = false with get, set

    [<AllowNullLiteral>]
    type ExpiresComponent() =
        inherit Component()
        member val delay = 0.0f with get, set

    [<AllowNullLiteral>]
    type FiringComponent() =
        inherit Component()
        member val active = false with get, set

    [<AllowNullLiteral>]
    type HealthComponent() =
        inherit Component()
        member val health = 0.0f with get, set
        member val maximumHealth = 0.0f with get, set

    [<AllowNullLiteral>]
    type ParallaxStarComponent() =
        inherit Component()
        member val active = false with get, set

    [<AllowNullLiteral>]
    type PlayerComponent() =
        inherit Component()
        member val active = false with get, set

    [<AllowNullLiteral>]
    type PositionComponent() =
        inherit Component()
        member val x = 0.0f with get, set
        member val y = 0.0f with get, set

    [<AllowNullLiteral>]
    type ScaleTweenComponent() =
        inherit Component()
        member val min = 0.0f with get, set
        member val max = 0.0f with get, set
        member val speed = 0.0f with get, set
        member val repeat = false with get, set
        member val active = false with get, set

    [<AllowNullLiteral>]
    type SoundEffectComponent() =
        inherit Component()
        member val effect = 0.0f with get, set

    [<AllowNullLiteral>]
    type ViewComponent() =
        inherit Component()
        member val gameObject = null with get, set

    [<AllowNullLiteral>]
    type VelocityComponent() =
        inherit Component()
        member val x = 0.0f with get, set
        member val y = 0.0f with get, set

    [<AllowNullLiteral>]
    type ScoreComponent() =
        inherit Component()
        member val value = 0.0f with get, set

    [<AllowNullLiteral>]
    type DestroyComponent() =
        inherit Component()
        member val active = false with get, set

    [<AllowNullLiteral>]
    type MouseComponent() =
        inherit Component()
        member val x = 0.0f with get, set
        member val y = 0.0f with get, set

    [<AllowNullLiteral>]
    type ScaleComponent() =
        inherit Component()
        member val x = 0.0f with get, set
        member val y = 0.0f with get, set

    [<AllowNullLiteral>]
    type ResourceComponent() =
        inherit Component()
        member val name = "" with get, set

    [<AllowNullLiteral>]
    type LayerComponent() =
        inherit Component()
        member val ordinal = 0.0f with get, set

    [<AllowNullLiteral>]
    type BackgroundComponent() =
        inherit Component()
        member val filter = null with get, set

    [<AllowNullLiteral>]
    type MineComponent() =
        inherit Component()
        member val active = false with get, set

    [<AllowNullLiteral>]
    type StatusComponent() =
        inherit Component()
        member val percent = 0.0f with get, set
        member val immunity = 0.0f with get, set

    [<AllowNullLiteral>]
    type LifeComponent() =
        inherit Component()
        member val count = 0.0f with get, set


    (**
    * Matcher extensions
    *)
    type Matcher with

        static member Bounds
            with get() = 
                Matcher.AllOf(Component.Bounds) 

        static member Bullet
            with get() = 
                Matcher.AllOf(Component.Bullet) 

        static member ColorTween
            with get() = 
                Matcher.AllOf(Component.ColorTween) 

        static member Enemy
            with get() = 
                Matcher.AllOf(Component.Enemy) 

        static member Expires
            with get() = 
                Matcher.AllOf(Component.Expires) 

        static member Firing
            with get() = 
                Matcher.AllOf(Component.Firing) 

        static member Health
            with get() = 
                Matcher.AllOf(Component.Health) 

        static member ParallaxStar
            with get() = 
                Matcher.AllOf(Component.ParallaxStar) 

        static member Player
            with get() = 
                Matcher.AllOf(Component.Player) 

        static member Position
            with get() = 
                Matcher.AllOf(Component.Position) 

        static member ScaleTween
            with get() = 
                Matcher.AllOf(Component.ScaleTween) 

        static member SoundEffect
            with get() = 
                Matcher.AllOf(Component.SoundEffect) 

        static member View
            with get() = 
                Matcher.AllOf(Component.View) 

        static member Velocity
            with get() = 
                Matcher.AllOf(Component.Velocity) 

        static member Score
            with get() = 
                Matcher.AllOf(Component.Score) 

        static member Destroy
            with get() = 
                Matcher.AllOf(Component.Destroy) 

        static member Mouse
            with get() = 
                Matcher.AllOf(Component.Mouse) 

        static member Scale
            with get() = 
                Matcher.AllOf(Component.Scale) 

        static member Resource
            with get() = 
                Matcher.AllOf(Component.Resource) 

        static member Layer
            with get() = 
                Matcher.AllOf(Component.Layer) 

        static member Background
            with get() = 
                Matcher.AllOf(Component.Background) 

        static member Mine
            with get() = 
                Matcher.AllOf(Component.Mine) 

        static member Status
            with get() = 
                Matcher.AllOf(Component.Status) 

        static member Life
            with get() = 
                Matcher.AllOf(Component.Life) 


    (**
    * Entity extensions
    *)
    type Entity with

        (** Entity: Bounds methods*)

        member this.boundsComponentPool
            with get() = new Stack<BoundsComponent>()

        member this.bounds
            with get() = this.GetComponent(Component.Bounds):?>BoundsComponent

        member this.HasBounds
            with get() = this.HasComponent(Component.Bounds)
 
        member this.ClearBoundsComponentPool() =
            this.boundsComponentPool.Clear()

        member this.AddBounds(radius) =
            let mutable c =
                match this.boundsComponentPool.Count with
                | 0 -> new BoundsComponent()
                | _ -> this.boundsComponentPool.Pop()
            c.radius <- radius
            this.AddComponent(Component.Bounds, c) |> ignore
            this

        member this.ReplaceBounds(radius) =
            let previousComponent = if this.HasBounds then this.bounds else null
            let mutable c =
                match this.boundsComponentPool.Count with
                | 0 -> new BoundsComponent()
                | _ -> this.boundsComponentPool.Pop()
            c.radius <- radius
            this.ReplaceComponent(Component.Bounds, c) |> ignore
            if not(isNull(previousComponent)) then
                this.boundsComponentPool.Push(previousComponent)
            this

        member this.RemoveBounds() =
            let c = this.bounds
            this.RemoveComponent(Component.Bounds) |> ignore
            this.boundsComponentPool.Push(c)
            this


        (** Entity: Bullet methods*)
        static member bulletComponent= new BulletComponent()

        member this.isBullet
            with get() =
                this.HasComponent(Component.Bullet)
            and set(value) =
                if (value <> this.isBullet) then
                    this.AddComponent(Component.Bullet, Entity.bulletComponent) |> ignore
                else
                    this.RemoveComponent(Component.Bullet) |> ignore
                
        member this.SetBullet(value) =
            this.isBullet <- value
            this


        (** Entity: ColorTween methods*)

        member this.colorTweenComponentPool
            with get() = new Stack<ColorTweenComponent>()

        member this.colorTween
            with get() = this.GetComponent(Component.ColorTween):?>ColorTweenComponent

        member this.HasColorTween
            with get() = this.HasComponent(Component.ColorTween)
 
        member this.ClearColorTweenComponentPool() =
            this.colorTweenComponentPool.Clear()

        member this.AddColorTween(redMin, redMax, redSpeed, greenMin, greenMax, greenSpeed, blueMin, blueMax, blueSpeed, alphaMin, alphaMax, alphaSpeed, redAnimate, greenAnimate, blueAnimate, alphaAnimate, repeat) =
            let mutable c =
                match this.colorTweenComponentPool.Count with
                | 0 -> new ColorTweenComponent()
                | _ -> this.colorTweenComponentPool.Pop()
            c.redMin <- redMin
            c.redMax <- redMax
            c.redSpeed <- redSpeed
            c.greenMin <- greenMin
            c.greenMax <- greenMax
            c.greenSpeed <- greenSpeed
            c.blueMin <- blueMin
            c.blueMax <- blueMax
            c.blueSpeed <- blueSpeed
            c.alphaMin <- alphaMin
            c.alphaMax <- alphaMax
            c.alphaSpeed <- alphaSpeed
            c.redAnimate <- redAnimate
            c.greenAnimate <- greenAnimate
            c.blueAnimate <- blueAnimate
            c.alphaAnimate <- alphaAnimate
            c.repeat <- repeat
            this.AddComponent(Component.ColorTween, c) |> ignore
            this

        member this.ReplaceColorTween(redMin, redMax, redSpeed, greenMin, greenMax, greenSpeed, blueMin, blueMax, blueSpeed, alphaMin, alphaMax, alphaSpeed, redAnimate, greenAnimate, blueAnimate, alphaAnimate, repeat) =
            let previousComponent = if this.HasColorTween then this.colorTween else null
            let mutable c =
                match this.colorTweenComponentPool.Count with
                | 0 -> new ColorTweenComponent()
                | _ -> this.colorTweenComponentPool.Pop()
            c.redMin <- redMin
            c.redMax <- redMax
            c.redSpeed <- redSpeed
            c.greenMin <- greenMin
            c.greenMax <- greenMax
            c.greenSpeed <- greenSpeed
            c.blueMin <- blueMin
            c.blueMax <- blueMax
            c.blueSpeed <- blueSpeed
            c.alphaMin <- alphaMin
            c.alphaMax <- alphaMax
            c.alphaSpeed <- alphaSpeed
            c.redAnimate <- redAnimate
            c.greenAnimate <- greenAnimate
            c.blueAnimate <- blueAnimate
            c.alphaAnimate <- alphaAnimate
            c.repeat <- repeat
            this.ReplaceComponent(Component.ColorTween, c) |> ignore
            if not(isNull(previousComponent)) then
                this.colorTweenComponentPool.Push(previousComponent)
            this

        member this.RemoveColorTween() =
            let c = this.colorTween
            this.RemoveComponent(Component.ColorTween) |> ignore
            this.colorTweenComponentPool.Push(c)
            this


        (** Entity: Enemy methods*)
        static member enemyComponent= new EnemyComponent()

        member this.isEnemy
            with get() =
                this.HasComponent(Component.Enemy)
            and set(value) =
                if (value <> this.isEnemy) then
                    this.AddComponent(Component.Enemy, Entity.enemyComponent) |> ignore
                else
                    this.RemoveComponent(Component.Enemy) |> ignore
                
        member this.SetEnemy(value) =
            this.isEnemy <- value
            this


        (** Entity: Expires methods*)

        member this.expiresComponentPool
            with get() = new Stack<ExpiresComponent>()

        member this.expires
            with get() = this.GetComponent(Component.Expires):?>ExpiresComponent

        member this.HasExpires
            with get() = this.HasComponent(Component.Expires)
 
        member this.ClearExpiresComponentPool() =
            this.expiresComponentPool.Clear()

        member this.AddExpires(delay) =
            let mutable c =
                match this.expiresComponentPool.Count with
                | 0 -> new ExpiresComponent()
                | _ -> this.expiresComponentPool.Pop()
            c.delay <- delay
            this.AddComponent(Component.Expires, c) |> ignore
            this

        member this.ReplaceExpires(delay) =
            let previousComponent = if this.HasExpires then this.expires else null
            let mutable c =
                match this.expiresComponentPool.Count with
                | 0 -> new ExpiresComponent()
                | _ -> this.expiresComponentPool.Pop()
            c.delay <- delay
            this.ReplaceComponent(Component.Expires, c) |> ignore
            if not(isNull(previousComponent)) then
                this.expiresComponentPool.Push(previousComponent)
            this

        member this.RemoveExpires() =
            let c = this.expires
            this.RemoveComponent(Component.Expires) |> ignore
            this.expiresComponentPool.Push(c)
            this


        (** Entity: Firing methods*)
        static member firingComponent= new FiringComponent()

        member this.isFiring
            with get() =
                this.HasComponent(Component.Firing)
            and set(value) =
                if (value <> this.isFiring) then
                    this.AddComponent(Component.Firing, Entity.firingComponent) |> ignore
                else
                    this.RemoveComponent(Component.Firing) |> ignore
                
        member this.SetFiring(value) =
            this.isFiring <- value
            this


        (** Entity: Health methods*)

        member this.healthComponentPool
            with get() = new Stack<HealthComponent>()

        member this.health
            with get() = this.GetComponent(Component.Health):?>HealthComponent

        member this.HasHealth
            with get() = this.HasComponent(Component.Health)
 
        member this.ClearHealthComponentPool() =
            this.healthComponentPool.Clear()

        member this.AddHealth(health, maximumHealth) =
            let mutable c =
                match this.healthComponentPool.Count with
                | 0 -> new HealthComponent()
                | _ -> this.healthComponentPool.Pop()
            c.health <- health
            c.maximumHealth <- maximumHealth
            this.AddComponent(Component.Health, c) |> ignore
            this

        member this.ReplaceHealth(health, maximumHealth) =
            let previousComponent = if this.HasHealth then this.health else null
            let mutable c =
                match this.healthComponentPool.Count with
                | 0 -> new HealthComponent()
                | _ -> this.healthComponentPool.Pop()
            c.health <- health
            c.maximumHealth <- maximumHealth
            this.ReplaceComponent(Component.Health, c) |> ignore
            if not(isNull(previousComponent)) then
                this.healthComponentPool.Push(previousComponent)
            this

        member this.RemoveHealth() =
            let c = this.health
            this.RemoveComponent(Component.Health) |> ignore
            this.healthComponentPool.Push(c)
            this


        (** Entity: ParallaxStar methods*)
        static member parallaxStarComponent= new ParallaxStarComponent()

        member this.isParallaxStar
            with get() =
                this.HasComponent(Component.ParallaxStar)
            and set(value) =
                if (value <> this.isParallaxStar) then
                    this.AddComponent(Component.ParallaxStar, Entity.parallaxStarComponent) |> ignore
                else
                    this.RemoveComponent(Component.ParallaxStar) |> ignore
                
        member this.SetParallaxStar(value) =
            this.isParallaxStar <- value
            this


        (** Entity: Player methods*)
        static member playerComponent= new PlayerComponent()

        member this.isPlayer
            with get() =
                this.HasComponent(Component.Player)
            and set(value) =
                if (value <> this.isPlayer) then
                    this.AddComponent(Component.Player, Entity.playerComponent) |> ignore
                else
                    this.RemoveComponent(Component.Player) |> ignore
                
        member this.SetPlayer(value) =
            this.isPlayer <- value
            this


        (** Entity: Position methods*)

        member this.positionComponentPool
            with get() = new Stack<PositionComponent>()

        member this.position
            with get() = this.GetComponent(Component.Position):?>PositionComponent

        member this.HasPosition
            with get() = this.HasComponent(Component.Position)
 
        member this.ClearPositionComponentPool() =
            this.positionComponentPool.Clear()

        member this.AddPosition(x, y, z) =
            let mutable c =
                match this.positionComponentPool.Count with
                | 0 -> new PositionComponent()
                | _ -> this.positionComponentPool.Pop()
            c.x <- x
            c.y <- y
            this.AddComponent(Component.Position, c) |> ignore
            this

        member this.ReplacePosition(x, y, z) =
            let previousComponent = if this.HasPosition then this.position else null
            let mutable c =
                match this.positionComponentPool.Count with
                | 0 -> new PositionComponent()
                | _ -> this.positionComponentPool.Pop()
            c.x <- x
            c.y <- y
            this.ReplaceComponent(Component.Position, c) |> ignore
            if not(isNull(previousComponent)) then
                this.positionComponentPool.Push(previousComponent)
            this

        member this.RemovePosition() =
            let c = this.position
            this.RemoveComponent(Component.Position) |> ignore
            this.positionComponentPool.Push(c)
            this


        (** Entity: ScaleTween methods*)

        member this.scaleTweenComponentPool
            with get() = new Stack<ScaleTweenComponent>()

        member this.scaleTween
            with get() = this.GetComponent(Component.ScaleTween):?>ScaleTweenComponent

        member this.HasScaleTween
            with get() = this.HasComponent(Component.ScaleTween)
 
        member this.ClearScaleTweenComponentPool() =
            this.scaleTweenComponentPool.Clear()

        member this.AddScaleTween(min, max, speed, repeat, active) =
            let mutable c =
                match this.scaleTweenComponentPool.Count with
                | 0 -> new ScaleTweenComponent()
                | _ -> this.scaleTweenComponentPool.Pop()
            c.min <- min
            c.max <- max
            c.speed <- speed
            c.repeat <- repeat
            c.active <- active
            this.AddComponent(Component.ScaleTween, c) |> ignore
            this

        member this.ReplaceScaleTween(min, max, speed, repeat, active) =
            let previousComponent = if this.HasScaleTween then this.scaleTween else null
            let mutable c =
                match this.scaleTweenComponentPool.Count with
                | 0 -> new ScaleTweenComponent()
                | _ -> this.scaleTweenComponentPool.Pop()
            c.min <- min
            c.max <- max
            c.speed <- speed
            c.repeat <- repeat
            c.active <- active
            this.ReplaceComponent(Component.ScaleTween, c) |> ignore
            if not(isNull(previousComponent)) then
                this.scaleTweenComponentPool.Push(previousComponent)
            this

        member this.RemoveScaleTween() =
            let c = this.scaleTween
            this.RemoveComponent(Component.ScaleTween) |> ignore
            this.scaleTweenComponentPool.Push(c)
            this


        (** Entity: SoundEffect methods*)

        member this.soundEffectComponentPool
            with get() = new Stack<SoundEffectComponent>()

        member this.soundEffect
            with get() = this.GetComponent(Component.SoundEffect):?>SoundEffectComponent

        member this.HasSoundEffect
            with get() = this.HasComponent(Component.SoundEffect)
 
        member this.ClearSoundEffectComponentPool() =
            this.soundEffectComponentPool.Clear()

        member this.AddSoundEffect(effect) =
            let mutable c =
                match this.soundEffectComponentPool.Count with
                | 0 -> new SoundEffectComponent()
                | _ -> this.soundEffectComponentPool.Pop()
            c.effect <- effect
            this.AddComponent(Component.SoundEffect, c) |> ignore
            this

        member this.ReplaceSoundEffect(effect) =
            let previousComponent = if this.HasSoundEffect then this.soundEffect else null
            let mutable c =
                match this.soundEffectComponentPool.Count with
                | 0 -> new SoundEffectComponent()
                | _ -> this.soundEffectComponentPool.Pop()
            c.effect <- effect
            this.ReplaceComponent(Component.SoundEffect, c) |> ignore
            if not(isNull(previousComponent)) then
                this.soundEffectComponentPool.Push(previousComponent)
            this

        member this.RemoveSoundEffect() =
            let c = this.soundEffect
            this.RemoveComponent(Component.SoundEffect) |> ignore
            this.soundEffectComponentPool.Push(c)
            this


        (** Entity: View methods*)

        member this.viewComponentPool
            with get() = new Stack<ViewComponent>()

        member this.view
            with get() = this.GetComponent(Component.View):?>ViewComponent

        member this.HasView
            with get() = this.HasComponent(Component.View)
 
        member this.ClearViewComponentPool() =
            this.viewComponentPool.Clear()

        member this.AddView(gameObject) =
            let mutable c =
                match this.viewComponentPool.Count with
                | 0 -> new ViewComponent()
                | _ -> this.viewComponentPool.Pop()
            c.gameObject <- gameObject
            this.AddComponent(Component.View, c) |> ignore
            this

        member this.ReplaceView(gameObject) =
            let previousComponent = if this.HasView then this.view else null
            let mutable c =
                match this.viewComponentPool.Count with
                | 0 -> new ViewComponent()
                | _ -> this.viewComponentPool.Pop()
            c.gameObject <- gameObject
            this.ReplaceComponent(Component.View, c) |> ignore
            if not(isNull(previousComponent)) then
                this.viewComponentPool.Push(previousComponent)
            this

        member this.RemoveView() =
            let c = this.view
            this.RemoveComponent(Component.View) |> ignore
            this.viewComponentPool.Push(c)
            this


        (** Entity: Velocity methods*)

        member this.velocityComponentPool
            with get() = new Stack<VelocityComponent>()

        member this.velocity
            with get() = this.GetComponent(Component.Velocity):?>VelocityComponent

        member this.HasVelocity
            with get() = this.HasComponent(Component.Velocity)
 
        member this.ClearVelocityComponentPool() =
            this.velocityComponentPool.Clear()

        member this.AddVelocity(x, y, z) =
            let mutable c =
                match this.velocityComponentPool.Count with
                | 0 -> new VelocityComponent()
                | _ -> this.velocityComponentPool.Pop()
            c.x <- x
            c.y <- y
            this.AddComponent(Component.Velocity, c) |> ignore
            this

        member this.ReplaceVelocity(x, y, z) =
            let previousComponent = if this.HasVelocity then this.velocity else null
            let mutable c =
                match this.velocityComponentPool.Count with
                | 0 -> new VelocityComponent()
                | _ -> this.velocityComponentPool.Pop()
            c.x <- x
            c.y <- y
            this.ReplaceComponent(Component.Velocity, c) |> ignore
            if not(isNull(previousComponent)) then
                this.velocityComponentPool.Push(previousComponent)
            this

        member this.RemoveVelocity() =
            let c = this.velocity
            this.RemoveComponent(Component.Velocity) |> ignore
            this.velocityComponentPool.Push(c)
            this


        (** Entity: Score methods*)

        member this.scoreComponentPool
            with get() = new Stack<ScoreComponent>()

        member this.score
            with get() = this.GetComponent(Component.Score):?>ScoreComponent

        member this.HasScore
            with get() = this.HasComponent(Component.Score)
 
        member this.ClearScoreComponentPool() =
            this.scoreComponentPool.Clear()

        member this.AddScore(value) =
            let mutable c =
                match this.scoreComponentPool.Count with
                | 0 -> new ScoreComponent()
                | _ -> this.scoreComponentPool.Pop()
            c.value <- value
            this.AddComponent(Component.Score, c) |> ignore
            this

        member this.ReplaceScore(value) =
            let previousComponent = if this.HasScore then this.score else null
            let mutable c =
                match this.scoreComponentPool.Count with
                | 0 -> new ScoreComponent()
                | _ -> this.scoreComponentPool.Pop()
            c.value <- value
            this.ReplaceComponent(Component.Score, c) |> ignore
            if not(isNull(previousComponent)) then
                this.scoreComponentPool.Push(previousComponent)
            this

        member this.RemoveScore() =
            let c = this.score
            this.RemoveComponent(Component.Score) |> ignore
            this.scoreComponentPool.Push(c)
            this


        (** Entity: Destroy methods*)
        static member destroyComponent= new DestroyComponent()

        member this.isDestroy
            with get() =
                this.HasComponent(Component.Destroy)
            and set(value) =
                if (value <> this.isDestroy) then
                    this.AddComponent(Component.Destroy, Entity.destroyComponent) |> ignore
                else
                    this.RemoveComponent(Component.Destroy) |> ignore
                
        member this.SetDestroy(value) =
            this.isDestroy <- value
            this


        (** Entity: Mouse methods*)

        member this.mouseComponentPool
            with get() = new Stack<MouseComponent>()

        member this.mouse
            with get() = this.GetComponent(Component.Mouse):?>MouseComponent

        member this.HasMouse
            with get() = this.HasComponent(Component.Mouse)
 
        member this.ClearMouseComponentPool() =
            this.mouseComponentPool.Clear()

        member this.AddMouse(x, y) =
            let mutable c =
                match this.mouseComponentPool.Count with
                | 0 -> new MouseComponent()
                | _ -> this.mouseComponentPool.Pop()
            c.x <- x
            c.y <- y
            this.AddComponent(Component.Mouse, c) |> ignore
            this

        member this.ReplaceMouse(x, y) =
            let previousComponent = if this.HasMouse then this.mouse else null
            let mutable c =
                match this.mouseComponentPool.Count with
                | 0 -> new MouseComponent()
                | _ -> this.mouseComponentPool.Pop()
            c.x <- x
            c.y <- y
            this.ReplaceComponent(Component.Mouse, c) |> ignore
            if not(isNull(previousComponent)) then
                this.mouseComponentPool.Push(previousComponent)
            this

        member this.RemoveMouse() =
            let c = this.mouse
            this.RemoveComponent(Component.Mouse) |> ignore
            this.mouseComponentPool.Push(c)
            this


        (** Entity: Scale methods*)

        member this.scaleComponentPool
            with get() = new Stack<ScaleComponent>()

        member this.scale
            with get() = this.GetComponent(Component.Scale):?>ScaleComponent

        member this.HasScale
            with get() = this.HasComponent(Component.Scale)
 
        member this.ClearScaleComponentPool() =
            this.scaleComponentPool.Clear()

        member this.AddScale(x, y) =
            let mutable c =
                match this.scaleComponentPool.Count with
                | 0 -> new ScaleComponent()
                | _ -> this.scaleComponentPool.Pop()
            c.x <- x
            c.y <- y
            this.AddComponent(Component.Scale, c) |> ignore
            this

        member this.ReplaceScale(x, y) =
            let previousComponent = if this.HasScale then this.scale else null
            let mutable c =
                match this.scaleComponentPool.Count with
                | 0 -> new ScaleComponent()
                | _ -> this.scaleComponentPool.Pop()
            c.x <- x
            c.y <- y
            this.ReplaceComponent(Component.Scale, c) |> ignore
            if not(isNull(previousComponent)) then
                this.scaleComponentPool.Push(previousComponent)
            this

        member this.RemoveScale() =
            let c = this.scale
            this.RemoveComponent(Component.Scale) |> ignore
            this.scaleComponentPool.Push(c)
            this


        (** Entity: Resource methods*)

        member this.resourceComponentPool
            with get() = new Stack<ResourceComponent>()

        member this.resource
            with get() = this.GetComponent(Component.Resource):?>ResourceComponent

        member this.HasResource
            with get() = this.HasComponent(Component.Resource)
 
        member this.ClearResourceComponentPool() =
            this.resourceComponentPool.Clear()

        member this.AddResource(name) =
            let mutable c =
                match this.resourceComponentPool.Count with
                | 0 -> new ResourceComponent()
                | _ -> this.resourceComponentPool.Pop()
            c.name <- name
            this.AddComponent(Component.Resource, c) |> ignore
            this

        member this.ReplaceResource(name) =
            let previousComponent = if this.HasResource then this.resource else null
            let mutable c =
                match this.resourceComponentPool.Count with
                | 0 -> new ResourceComponent()
                | _ -> this.resourceComponentPool.Pop()
            c.name <- name
            this.ReplaceComponent(Component.Resource, c) |> ignore
            if not(isNull(previousComponent)) then
                this.resourceComponentPool.Push(previousComponent)
            this

        member this.RemoveResource() =
            let c = this.resource
            this.RemoveComponent(Component.Resource) |> ignore
            this.resourceComponentPool.Push(c)
            this


        (** Entity: Layer methods*)

        member this.layerComponentPool
            with get() = new Stack<LayerComponent>()

        member this.layer
            with get() = this.GetComponent(Component.Layer):?>LayerComponent

        member this.HasLayer
            with get() = this.HasComponent(Component.Layer)
 
        member this.ClearLayerComponentPool() =
            this.layerComponentPool.Clear()

        member this.AddLayer(ordinal) =
            let mutable c =
                match this.layerComponentPool.Count with
                | 0 -> new LayerComponent()
                | _ -> this.layerComponentPool.Pop()
            c.ordinal <- ordinal
            this.AddComponent(Component.Layer, c) |> ignore
            this

        member this.ReplaceLayer(ordinal) =
            let previousComponent = if this.HasLayer then this.layer else null
            let mutable c =
                match this.layerComponentPool.Count with
                | 0 -> new LayerComponent()
                | _ -> this.layerComponentPool.Pop()
            c.ordinal <- ordinal
            this.ReplaceComponent(Component.Layer, c) |> ignore
            if not(isNull(previousComponent)) then
                this.layerComponentPool.Push(previousComponent)
            this

        member this.RemoveLayer() =
            let c = this.layer
            this.RemoveComponent(Component.Layer) |> ignore
            this.layerComponentPool.Push(c)
            this


        (** Entity: Background methods*)

        member this.backgroundComponentPool
            with get() = new Stack<BackgroundComponent>()

        member this.background
            with get() = this.GetComponent(Component.Background):?>BackgroundComponent

        member this.HasBackground
            with get() = this.HasComponent(Component.Background)
 
        member this.ClearBackgroundComponentPool() =
            this.backgroundComponentPool.Clear()

        member this.AddBackground(filter) =
            let mutable c =
                match this.backgroundComponentPool.Count with
                | 0 -> new BackgroundComponent()
                | _ -> this.backgroundComponentPool.Pop()
            c.filter <- filter
            this.AddComponent(Component.Background, c) |> ignore
            this

        member this.ReplaceBackground(filter) =
            let previousComponent = if this.HasBackground then this.background else null
            let mutable c =
                match this.backgroundComponentPool.Count with
                | 0 -> new BackgroundComponent()
                | _ -> this.backgroundComponentPool.Pop()
            c.filter <- filter
            this.ReplaceComponent(Component.Background, c) |> ignore
            if not(isNull(previousComponent)) then
                this.backgroundComponentPool.Push(previousComponent)
            this

        member this.RemoveBackground() =
            let c = this.background
            this.RemoveComponent(Component.Background) |> ignore
            this.backgroundComponentPool.Push(c)
            this


        (** Entity: Mine methods*)
        static member mineComponent= new MineComponent()

        member this.isMine
            with get() =
                this.HasComponent(Component.Mine)
            and set(value) =
                if (value <> this.isMine) then
                    this.AddComponent(Component.Mine, Entity.mineComponent) |> ignore
                else
                    this.RemoveComponent(Component.Mine) |> ignore
                
        member this.SetMine(value) =
            this.isMine <- value
            this


        (** Entity: Status methods*)

        member this.statusComponentPool
            with get() = new Stack<StatusComponent>()

        member this.status
            with get() = this.GetComponent(Component.Status):?>StatusComponent

        member this.HasStatus
            with get() = this.HasComponent(Component.Status)
 
        member this.ClearStatusComponentPool() =
            this.statusComponentPool.Clear()

        member this.AddStatus(percent, immunity) =
            let mutable c =
                match this.statusComponentPool.Count with
                | 0 -> new StatusComponent()
                | _ -> this.statusComponentPool.Pop()
            c.percent <- percent
            c.immunity <- immunity
            this.AddComponent(Component.Status, c) |> ignore
            this

        member this.ReplaceStatus(percent, immunity) =
            let previousComponent = if this.HasStatus then this.status else null
            let mutable c =
                match this.statusComponentPool.Count with
                | 0 -> new StatusComponent()
                | _ -> this.statusComponentPool.Pop()
            c.percent <- percent
            c.immunity <- immunity
            this.ReplaceComponent(Component.Status, c) |> ignore
            if not(isNull(previousComponent)) then
                this.statusComponentPool.Push(previousComponent)
            this

        member this.RemoveStatus() =
            let c = this.status
            this.RemoveComponent(Component.Status) |> ignore
            this.statusComponentPool.Push(c)
            this


        (** Entity: Life methods*)

        member this.lifeComponentPool
            with get() = new Stack<LifeComponent>()

        member this.life
            with get() = this.GetComponent(Component.Life):?>LifeComponent

        member this.HasLife
            with get() = this.HasComponent(Component.Life)
 
        member this.ClearLifeComponentPool() =
            this.lifeComponentPool.Clear()

        member this.AddLife(count) =
            let mutable c =
                match this.lifeComponentPool.Count with
                | 0 -> new LifeComponent()
                | _ -> this.lifeComponentPool.Pop()
            c.count <- count
            this.AddComponent(Component.Life, c) |> ignore
            this

        member this.ReplaceLife(count) =
            let previousComponent = if this.HasLife then this.life else null
            let mutable c =
                match this.lifeComponentPool.Count with
                | 0 -> new LifeComponent()
                | _ -> this.lifeComponentPool.Pop()
            c.count <- count
            this.ReplaceComponent(Component.Life, c) |> ignore
            if not(isNull(previousComponent)) then
                this.lifeComponentPool.Push(previousComponent)
            this

        member this.RemoveLife() =
            let c = this.life
            this.RemoveComponent(Component.Life) |> ignore
            this.lifeComponentPool.Push(c)
            this

